<?php

/**
 * @file
 * Contains atlas_common functions and hooks.
 */
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Database\Database;

/**
 * Returns skills of given Role id.
 */
function getSkillsFromRoleID($nid) {
  $role_skills = [];
  $node = Node::load($nid);
  $node_type = $node->bundle();
  // Check for only assessment_form.
  if ($node->bundle() == 'assessment_form') {
    $field_category_paragraph_ref = $node->get('field_category')->getValue();
    foreach ($field_category_paragraph_ref as $category) {
      $category_id = $category['target_id'];
      $paragraph_category = Paragraph::load($category['target_id']);
      $category_skills = $paragraph_category->field_skills->getValue();
      foreach ($category_skills as $skill) {
        $category_skill_paragraph_ref = Paragraph::load($skill['target_id']);
        $skill_name = $category_skill_paragraph_ref->field_skill->getValue();
        $role_skills[$skill['target_id']] = $skill_name[0]['value'];
      }
    }
  }
  return $role_skills;
}

/**
 * Returns skill wise 360 results array.
 */
function get360Score($skills_data) {
  $score_360 = [];
  foreach ($skills_data as $skill_name => $skill_values) {
    $relation_sum_value = 0;
    foreach ($skills_data[$skill_name] as $relation => $rating_values) {
      $relation_sum_value += array_sum($rating_values) / count($rating_values);
      $num_of_relation = count($skills_data[$skill_name]);
    }
    $score = $relation_sum_value / $num_of_relation;
    $score_360[$skill_name] = floor($score * 2) / 2;
  }
  return $score_360;
}

/**
 * Returns Normalised as per given skill.
 */
function normalised_score_to_5($score, $skill_id) {
  $connection = Database::getConnection();
  $query = $connection->select('paragraph__field_number_of_levels', 'p');
  $query->condition('p.	entity_id', $skill_id);
  $query->fields('p', ['field_number_of_levels_value']);
  $no_of_levels = $query->execute()->fetchField();
  $score = ($score * 5) / $no_of_levels;
  return $score;
}

/**
 * Returns all skill data of assessment invites.
 */
function GetAssessmentInvitesSkillData($assessment_id) {
  // Loads current user ID.
  $current_user_id = \Drupal::currentUser()->id();

  // Get All skills with raters values of invited assessments.
  $connection = Database::getConnection();
  $query = $connection->select('assessment_invite', 'ai');
  $query->Join('assessment_invite_details', 'aid', 'aid.invite_id= ai.invite_id');
  $query->Join('assessment_data', 'ad', 'ad.invite_id = aid.id');
  $query->Join('assessment_skill_data', 'asd', 'asd.assessment_id = ad.assessment_id');
  $query->fields('ai');
  $query->fields('aid', ['relationship_tid', 'id']);
  $query->fields('ad', ['assessment_id']);
  $query->fields('asd');
  $query->condition('aid.completed', 1);
  $query->condition('aid.invite_id', $assessment_id);
  $raters_skill_data = $query->execute()->fetchAll();


  if ($raters_skill_data) {
    // Strengths and opportunities buttons.
    foreach ($raters_skill_data as $rater_skill) {
      if ($rater_skill->score > 0) {
        $skill_wise_ratings[$rater_skill->skill_id][$rater_skill->relationship_tid][] = normalised_score_to_5($rater_skill->score, $rater_skill->skill_id);
      }
    }

    $overall_proficiency_results = get360Score($skill_wise_ratings);
    return $overall_proficiency_results;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns all skill data of assessment invites.
 */
function get_latest_invite_id() {
  $connection = Database::getConnection();
  $current_user_id = \Drupal::currentUser()->id();
  // To get default invite_id.
  $query = $connection->select('assessment_invite', 'ai');
  $query->Join('assessment_invite_details', 'aid', 'aid.invite_id= ai.invite_id');
  $query->Join('assessment_data', 'ad', 'ad.invite_id = aid.id');
  $query->Join('assessment_skill_data', 'asd', 'asd.assessment_id = ad.assessment_id');
  $query->fields('ai');
  $query->fields('aid', ['relationship_tid', 'id']);
  $query->fields('ad', ['assessment_id']);
  $query->fields('asd');
  $query->condition('asd.score', 0, '>');
  $query->condition('ai.uid', $current_user_id);
  $query->condition('aid.completed', 1);
  $query->orderBy('ai.invite_id', 'DESC');
  $query->range(0, 1);
  $default_invite_value = $query->execute()->fetchAll();
  $default_invite_id = $default_invite_value[0]->invite_id;
  if ($default_invite_id) {
    return $default_invite_id;
  }
  return FALSE;
}

/**
 * Returns top strenghts and oppoutunities.
 */
function get_top_strengths_opportunities($role_id, $type, $number) {
//  GetAssessmentInvitesSkillData
  $connection = Database::getConnection();
  $query = $connection->select('assessment_invite', 'ai');
  $query->Join('assessment_invite_details', 'aid', 'aid.invite_id= ai.invite_id');
  $query->fields('ai');
  $query->fields('aid');
  $query->condition('aid.completed', 1);
  $query->condition('ai.role_id', $role_id);
  $role_invites = $query->execute()->fetchAll();
  $all_strenghts = [];
  $all_opportunities = [];

  if ($role_invites) {
    foreach ($role_invites as $invite) {
      $invites_results[] = GetAssessmentInvitesSkillData($invite->invite_id);
    }
    if ($invites_results) {
      foreach ($invites_results as $each_result) {
        if ($each_result) {
          foreach ($each_result as $skill_id => $score) {
            $category_skill_paragraph_ref = Paragraph::load($skill_id);
            $skill_name = $category_skill_paragraph_ref->field_skill->getValue();

            $target_proficiency_level = $category_skill_paragraph_ref->field_target_proficiency->getValue();
            $normalised_target_proficiency_level = normalised_score_to_5($target_proficiency_level[0]['value'], $skill_id);
            $floor_target_level = floor($normalised_target_proficiency_level * 2) / 2;
            $gap = $score - $floor_target_level;
            if ($gap >= 0) {
              $all_strenghts[] = ["name" => $skill_name[0]['value'], "360_score" => $score, "gap" => $gap];
            }
            else {
              $all_opportunities[] = ["name" => $skill_name[0]['value'], "360_score" => $score, "gap" => $gap];
            }
          }
        }
      }
    }
  }

  if ($all_strenghts && $type == 'strengths') {
    array_sort_by_column($all_strenghts, "gap", SORT_DESC);
    $top_strenghts = array_slice($all_strenghts, 0, $number, true);
    return $top_strenghts;
  }


  if ($all_opportunities && $type == "opportunities") {
    array_sort_by_column($all_opportunities, "gap");
    $top_opportunities = array_slice($all_opportunities, 0, $number, true);
    return $top_opportunities;
  }
  return FALSE;
}

/**
 * Sorts multidimensional array.
 */
function array_sort_by_column(&$arr, $col, $dir = SORT_ASC) {
  $sort_col = array();
  foreach ($arr as $key => $row) {
    $sort_col[$key] = $row[$col];
  }

  array_multisort($sort_col, $dir, $arr);
}
