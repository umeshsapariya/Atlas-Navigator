<?php

/**
 * @file
 * Contains .module.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Database\Connection;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_theme().
 */
function atlas_learning_activity_theme($existing, $type, $theme, $path) {
  return [
    'learning_activity_form' => [
      'render element' => 'form',
    ],
  ];
}

/*
 * Implements hook_form_alter().
 */
function atlas_learning_activity_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'node_learning_activity_form' || $form_id == 'node_learning_activity_edit_form') {
    $form['#theme'] = 'learning_activity_form';
    $form['#title'] = t('Activity Creator');
    unset($form['field_activity_url']['widget'][0]['uri']['#description']);
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    $form['actions']['submit']['#submit'][] = '_activity_node_form_submit';

    // Save field values for forms.
    if (!in_array("administrator", $roles)) {
      $form['revision_information']['#access'] = false;
    }
    $form['#prefix'] = "<div id='whole-form'>";
    $form['#suffix'] = "</div>";

    foreach ($form['field_activity_categories']['widget'] as $key => $value) {
      if (is_numeric($key)) {
        $form['field_activity_categories']['widget'][$key]['top']['links']['remove_button']['#value'] = "X";
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_role']['widget']['#ajax'] = [
          'callback' => 'getAjaxCategoriesByRoles',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];

        $category_options = ['_none' => '- Select -'];
        $role_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_role']['widget']['#default_value'];
        $user_input = $form_state->getUserInput();
        if (!empty($role_default_value)) {
          $category_options = getCategoriesByRolesID($role_default_value[0]);
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#options'] = $category_options;

        $skill_options = ['_none' => '- Select -'];
        $category_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#default_value'];
        if (!empty($category_default_value)) {
          $skill_options = getSkillsByCategoryID($category_default_value[0]);
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#options'] = $skill_options;

        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#ajax'] = [
          'callback' => 'getAjaxSkillsByCategory',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#ajax'] = [
          'callback' => 'getAjaxLevelsBySkill',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];

        $skill_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#default_value'];
        $levels = 10;
        $level_options = [];
        if (!empty($skill_default_value)) {
          $skill_para = Paragraph::load($skill_default_value[0]);
          $levels = $skill_para->field_number_of_levels->value;
        }

        for ($j = 1; $j <= $levels; $j++) {
          $level_options[$j] = $j;
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_level']['widget']['#options'] = $level_options;
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['#validated'] = TRUE;
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['#validated'] = TRUE;
      }
    }
  }
}

/*
 * Custom submit handler for activity node.
 */
function _activity_node_form_submit($form, FormStateInterface $form_state) {
  $activity_id = $form_state->getValues()['nid'];
  if ($activity_id) {
    foreach ($form_state->getValues()['field_activity_categories'] as $key => $data) {
      if (isset($data['subform'])) {
        $role_id = $data['subform']['field_activity_role'][0]['target_id'];
        $skill_id = $data['subform']['field_activity_skill'][0]['value'];
        $selected_levels = $data['subform']['field_activity_level'];
        $skill_para = Paragraph::load($skill_id);
        if (isset($skill_para)) {
          $skill_level_informations = $skill_para->field_skill_level_information->getValue();
          foreach ($selected_levels as $key => $levels) {
            foreach ($skill_level_informations as $id => $skill_level) {
              if ($levels['value'] == ($id + 1)) {
                $level_id = $skill_level['target_id'];
                $level_para = Paragraph::load($level_id);
                $field_level_header = $level_para->field_level_header->getValue();
                if (!empty($field_level_header[0]['value'])) {
                  $level_activity_ids = [];
                  $level_activities[] = $level_para->field_assigned_activity->getValue();
                  foreach ($level_activities as $key1 => $value1) {
                    if (!empty($value1['0']['target_id'])) {
                      $level_activity_ids[] = $value1['0']['target_id'];
                    }
                  }
                  if (!in_array($activity_id, $level_activity_ids)) {
                    $level_activity_ids[] = $activity_id;
                  }
                  $level_para->set('field_assigned_activity', $level_activity_ids);
                  $level_para->save();
                  $url = Url::fromUri('internal:' . '/activity-list');
                  $form_state->setRedirectUrl($url);
                }
              }
            }
          }
        }
      }
    }
  }
}

/*
 * Implements AJAX callback for categories().
 */
function getAjaxCategoriesByRoles($form, FormStateInterface $form_state) {
  return $form;
}

function getAjaxSkillsByCategory($form, FormStateInterface $form_state) {
  return $form;
}

function getAjaxLevelsBySkill($form, FormStateInterface $form_state) {
  return $form;
}

/*
 * Fetch all categories.
 */
function getAllCategories() {
  $category = ['_none' => '- Select -'];
  $query = \Drupal::database()->select('paragraph__field_new_category', 'pfc');
  $query->fields('pfc', ['entity_id', 'field_new_category_value']);
  $query->fields('pfd', ['parent_id']);
  $query->join('paragraphs_item_field_data', 'pfd', 'pfd.revision_id = pfc.revision_id');
  $query->condition('pfd.parent_field_name', 'field_category');
  $query->condition('pfc.bundle', 'category');
  $query->distinct('pfc.entity_id');

  $data = $query->execute()->fetchAll();
  if (!empty($data)) {
    foreach ($data as $id => $category_data) {
      $category[$category_data->entity_id] = $category_data->field_new_category_value;
    }
  }
  return $category;
}

/*
 * Fetch all skills.
 */
function getAllSkills() {
  $skill = ['_none' => '- Select -'];
  $query = \Drupal::database()->select('paragraph__field_skill', 'pfc');
  $query->fields('pfc', ['entity_id', 'field_skill_value']);
  $query->fields('pfd', ['parent_id']);
  $query->join('paragraphs_item_field_data', 'pfd', 'pfd.revision_id = pfc.revision_id');
  $query->condition('pfd.parent_field_name', 'field_skills');
  $query->condition('pfc.bundle', 'skill');
  $query->distinct('pfc.entity_id');

  $data = $query->execute()->fetchAll();
  if (!empty($data)) {
    foreach ($data as $id => $skill_data) {
      $skill[$skill_data->entity_id] = $skill_data->field_skill_value;
    }
  }
  return $skill;
}
