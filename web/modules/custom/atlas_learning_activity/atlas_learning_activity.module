<?php

/**
 * @file
 * Contains .module.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_alter().
 */
function atlas_learning_activity_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'node_learning_activity_form' || $form_id == 'node_learning_activity_edit_form') {
    $form['#theme'] = 'learning_activity_form';
    //$form['#validate'][] = 'custom_url_validate';
    $form['#title'] = t('Activity Creator');
    unset($form['field_activity_url']['widget'][0]['uri']['#description']);
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    $form['actions']['submit']['#submit'][] = '_activity_node_form_submit';

    // Save field values for forms.
    if (!in_array("administrator", $roles)) {
      $form['revision_information']['#access'] = FALSE;
    }
    $form['#prefix'] = "<div id='whole-form'>";
    $form['#suffix'] = "</div>";

    foreach ($form['field_activity_categories']['widget'] as $key => $value) {
      if (is_numeric($key)) {
        $form['field_activity_categories']['widget'][$key]['top']['links']['remove_button']['#value'] = "X";
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_role']['widget']['#ajax'] = [
          'callback' => 'getAjaxCategoriesByRoles',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];

        $category_options = ['_none' => '- Select -'];
        $role_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_role']['widget']['#default_value'];
        $user_input = $form_state->getUserInput();
        if (!empty($role_default_value)) {
          $category_options = getCategoriesByRolesID($role_default_value[0]);
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#options'] = $category_options;

        $skill_options = ['_none' => '- Select -'];
        $category_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#default_value'];
        if (!empty($category_default_value)) {
          $skill_options = getSkillsByCategoryID($category_default_value[0]);
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#options'] = $skill_options;

        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['widget']['#ajax'] = [
          'callback' => 'getAjaxSkillsByCategory',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#ajax'] = [
          'callback' => 'getAjaxLevelsBySkill',
          'wrapper' => 'whole-form',
          'effect' => 'fade',
          'event' => 'change',
        ];

        $skill_default_value = $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['widget']['#default_value'];
        $levels = 10;
        $level_options = [];
        if (!empty($skill_default_value)) {
          $skill_para = Paragraph::load($skill_default_value[0]);
          $levels = $skill_para->field_number_of_levels->value;
        }

        for ($j = $levels; $j >= 1; $j--) {
          $level_options[$levels - $j + 1] = $j;
        }
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_level']['widget']['#options'] = $level_options;
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_category']['#validated'] = TRUE;
        $form['field_activity_categories']['widget'][$key]['subform']['field_activity_skill']['#validated'] = TRUE;
      }
    }
  }

  // Node assessment edit form.
  if ($form_id == 'node_assessment_form_edit_form') {
    $node = $form_state->getFormObject()->getEntity()->toArray();
    foreach ($node['field_category'] as $key => $category) {
      $category_id = $category['target_id'];
      $p = Paragraph::load($category['target_id']);
      if (isset($p)) {
        $skills_name = $p->field_skills->getValue();
        foreach ($skills_name as $sk_id => $skill) {
          $sp = Paragraph::load($skill['target_id']);
          $skills = $sp->field_skill->getValue();
          $skill_level_informations = $sp->field_skill_level_information->getValue();
          $skill_id = $skill['target_id'];
          foreach ($skill_level_informations as $level_id => $skill_level) {
            $form['field_category']['widget'][$key]['subform']['field_skills']['widget'][$sk_id]['subform']['field_skill_level_information']['widget'][$level_id]['subform']['activity_wrapper_' . $level_id] = [
              '#type' => 'fieldset',
              '#title' => t('Assigned Activities'),
              "#prefix" => '<div id="assigned-activity-wrapper" class="scroll_div_content">',
              "#suffix" => '</div>',
              '#weight' => 999,
              '#collapsible' => TRUE,
              '#collapsed' => FALSE,
            ];
            $level_activities = [];
            if (isset($skill_level['target_id'])) {
              $sl = Paragraph::load($skill_level['target_id']);
              $skill_level_id = $skill_level['target_id'];
              if (isset($sl)) {
                $field_level_header = $sl->field_level_header->getValue();
                if (!empty($field_level_header[0]['value'])) {
                  $level_activities[] = $sl->field_assigned_activity->getValue();
                  foreach ($level_activities as $key1 => $value1) {
                    $level_activity_ids = [];
                    foreach ($value1 as $activity_index => $activity_value) {
                      if (!empty($activity_value['target_id'])) {
                        if (!in_array($activity_value['target_id'], $level_activity_ids)) {
                          $level_activity_ids[] = $activity_value['target_id'];
                          $activity = Node::load($activity_value['target_id']);
                          if ($activity) {
                            $url = Url::fromRoute('entity.node.edit_form', ['node' => $activity_value['target_id']]);
                            $edit_link = Link::fromTextAndUrl($activity->getTitle(), $url);
                            $activity_link = $edit_link->toRenderable();
                            $form['field_category']['widget'][$key]['subform']['field_skills']['widget'][$sk_id]['subform']['field_skill_level_information']['widget'][$level_id]['subform']['activity_wrapper_' . $level_id]['field_assigned_activity_data_' . $activity_value['target_id']] = [
                              '#markup' => render($activity_link),
                              '#weight' => 999,
                              '#prefix' => '<div class="assigned-activity">',
                              '#suffix' => '</div>',
                            ];
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function atlas_learning_activity_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();
  if ($paragraph_entity_reference_field_name == 'field_skill_level_information') {
    unset($element['subform']['field_assigned_activity']['widget']);
    $add_url = Url::fromRoute('node.add', ['node_type' => 'learning_activity']);
    $add_link = Link::fromTextAndUrl(t('Add activity'), $add_url);
    $add_activity_link = $add_link->toRenderable();
    $element['subform']['activity_add_link'] = [
      '#markup' => render($add_activity_link),
      '#weight' => 9999,
      '#prefix' => '<div class="add-activity-link">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Custom submit handler for activity node.
 */
function _activity_node_form_submit($form, FormStateInterface $form_state) {
  $activity_id = $form_state->getValues()['nid'];
  if ($activity_id) {
    foreach ($form_state->getValues()['field_activity_categories'] as $key => $data) {
      if (isset($data['subform'])) {
        $level_arr = [];
        $role_id = $data['subform']['field_activity_role'][0]['target_id'];
        $skill_id = $data['subform']['field_activity_skill'][0]['value'];
        $selected_levels = $data['subform']['field_activity_level'];
        $skill_para = Paragraph::load($skill_id);
        if (isset($skill_para)) {
          $skill_level_informations = $skill_para->field_skill_level_information->getValue();
          foreach ($selected_levels as $key => $levels) {
            if (!empty($levels['value'])) {
              $level_arr[] = $levels['value'];
              foreach ($skill_level_informations as $id => $skill_level) {
                if (($levels['value'] - 1) == $id) {
                  $level_activities = [];
                  $level_id = $skill_level['target_id'];
                  $level_para = Paragraph::load($level_id);
                  $field_level_header = $level_para->field_level_header->getValue();
                  if (!empty($field_level_header[0]['value'])) {
                    $level_activities[] = $level_para->field_assigned_activity->getValue();
                    foreach ($level_activities as $key1 => $value1) {
                      $level_activity_ids = [];
                      foreach ($value1 as $activity_index => $activity_value) {
                        if (!empty($activity_value['target_id'])) {
                          if (!in_array($activity_value['target_id'], $level_activity_ids)) {
                            $level_activity_ids[] = $activity_value['target_id'];
                          }
                        }
                      }
                      if (!in_array($activity_id, $level_activity_ids)) {
                        $level_activity_ids[] = $activity_id;
                      }
                      $level_para->set('field_assigned_activity', $level_activity_ids);
                      $level_para->save();
                    }
                  }
                }
              }
            }
          }
          // Remove activity for unselected skills and at particular levels.
          foreach ($skill_level_informations as $id => $skill_level) {
            if (!in_array($id + 1, $level_arr)) {
              $level_activities = [];
              $level_id = $skill_level['target_id'];
              $level_para = Paragraph::load($level_id);
              $field_level_header = $level_para->field_level_header->getValue();
              if (!empty($field_level_header[0]['value'])) {
                $level_activities[] = $level_para->field_assigned_activity->getValue();
                foreach ($level_activities as $key1 => $value1) {
                  $level_activity_ids = [];
                  foreach ($value1 as $activity_index => $activity_value) {
                    if (!empty($activity_value['target_id'])) {
                      if (!in_array($activity_value['target_id'], $level_activity_ids)) {
                        $level_activity_ids[] = $activity_value['target_id'];
                      }
                    }
                  }
                  // Remove activity if unselected.
                  if (($remove_key = array_search($activity_id, $level_activity_ids)) !== false) {
                    unset($level_activity_ids[$remove_key]);
                  }
                  $level_para->set('field_assigned_activity', $level_activity_ids);
                  $level_para->save();
                }
              }
            }
          }
        }
      }
    }
  }
  $url = Url::fromUri('internal:' . '/activity-list');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements AJAX callback for categories().
 */
function getAjaxCategoriesByRoles($form, FormStateInterface $form_state) {
  return $form;
}

/**
 *
 */
function getAjaxSkillsByCategory($form, FormStateInterface $form_state) {
  return $form;
}

/**
 *
 */
function getAjaxLevelsBySkill($form, FormStateInterface $form_state) {
  return $form;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
/*function custom_url_validate($form, FormStateInterface $form_state) {
  $activity_url = $form_state->getValue('field_activity_url');
  $activity_url =  $activity_url[0]['value'];
  if ($activity_url) {
    $activity_url = strpos($activity_url, 'http') !== 0 ? "http://".$activity_url : $activity_url;
    if($activity_url && !preg_match( '/^(http|https):\\/\\/[a-z0-9_]+([\\-\\.]{1}[a-z_0-9]+)*\\.[_a-z]{2,5}'.'((:[0-9]{1,5})?\\/.*)?$/i' ,$activity_url)){
      $form_state->setErrorByName('field_activity_url', t('Not a valid URL'));
    }
  }
}*/
